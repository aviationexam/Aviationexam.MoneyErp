# Usage: template to fetch an OAuth2 access token (client_credentials) and expose it to later steps/jobs.
parameters:
  - name: tokenServerUrl
    type: string
  - name: selfSignedServerCert
    type: string
    default: ''
  - name: clientId
    type: string
  - name: clientSecret
    type: string
  - name: scope
    type: string
    default: 'S5Api'
  - name: stepName
    type: string
    default: 'get_token'

steps:
  - bash: |
      set -euo pipefail

      TOKEN_ENDPOINT="${{ parameters.tokenServerUrl }}/connect/token"

      echo "Fetching access token from: ${TOKEN_ENDPOINT}"

      CACERT=''
      if [[ -n '${{ parameters.selfSignedServerCert }}' ]]; then
        FILE=$(mktemp "$(Agent.TempDirectory)/cacert-XXXXXX.pem")
        echo "Temp CA path is $FILE"

        echo '${{ parameters.selfSignedServerCert }}' > "$FILE"

        CACERT="--cacert ${FILE}"
      fi

      RESPONSE=$(curl -sS --fail \
        --request POST \
        $CACERT \
        --header "Content-Type: application/x-www-form-urlencoded" \
        --data-urlencode "grant_type=client_credentials" \
        --data-urlencode "client_id=${CLIENT_ID}" \
        --data-urlencode "client_secret=${CLIENT_SECRET}" \
        --data-urlencode "scope=${SCOPE}" \
        "${TOKEN_ENDPOINT}" \
      )

      TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

      if [ "$token" == "null" ] || [ -z "$token" ]; then
        echo "Error: Could not retrieve access token. Response was:"
        echo "$RESPONSE"
        exit 1
      fi

      # Mask in logs
      echo "##vso[task.setsecret]$TOKEN"

      # Make it available to subsequent steps in the same job
      echo "##vso[task.setvariable variable=access_token]$TOKEN"

      echo "##vso[task.setvariable variable=access_token;isOutput=true]$TOKEN"
    name: ${{ parameters.stepName }}
    displayName: 'Get access token (client_credentials)'
    env:
      CLIENT_ID: ${{ parameters.clientId }}
      CLIENT_SECRET: ${{ parameters.clientSecret }}
      SCOPE: ${{ parameters.scope }}
