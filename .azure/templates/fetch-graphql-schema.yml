# Usage: template to fetch an OAuth2 access token (client_credentials) and expose it to later steps/jobs.
parameters:
  - name: endpoint
    type: string
  - name: selfSignedServerCert
    type: string
    default: ''
  - name: access_token
    type: string
  - name: stepName
    type: string
  - name: workingDirectory
    type: string

steps:
  - bash: |
      set -euo pipefail

      cd '${{ parameters.workingDirectory }}'

      CACERT=''
      if [[ -n '${{ parameters.selfSignedServerCert }}' ]]; then
        FILE=$(mktemp "$(Agent.TempDirectory)/cacert-XXXXXX.pem")
        echo "Temp CA path is $FILE"

        echo '${{ parameters.selfSignedServerCert }}' | base64 -d > "$FILE"

        CACERT="--cacert ${FILE}"
      fi

      curl -sS --fail \
           --request POST \
           '${{ parameters.endpoint }}/graphql' \
           $CACERT \
           --header 'Content-Type: application/json' \
           --header 'Authorization: Bearer ${{ parameters.access_token }}' \
           --data '{ "query": "query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name } } } }" }' \
           > schema.json

      jq '{data: .Data}' schema.json > schema-fixed.json

      npm install -g graphql-json-to-sdl
      graphql-json-to-sdl schema-fixed.json schema.graphql

      echo "##vso[task.setvariable variable=schema_path;isOutput=true]${{ parameters.workingDirectory }}/schema.graphql"
    name: ${{ parameters.stepName }}
    displayName: 'Fetch GraphQL Schema'
