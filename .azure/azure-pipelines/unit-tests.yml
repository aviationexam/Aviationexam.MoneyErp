name: CI-UnitTests-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main

schedules:
- cron: "0 6 * * 1"    # 06:00 UTC â‰ˆ 08:00 Europe/Paris (CET/CEST)
  displayName: Weekly Monday 08:00 Paris
  branches:
    include:
      - main
  always: true

pool:
  name: 'Private Docker'
  demands:
    - docker

variables:
  buildConfiguration: 'Release'
  NUGET_PACKAGES: '$(Pipeline.Workspace)/.nuget/packages'
  TEST_RESULTS: '$(Pipeline.Workspace)/test-results'

stages:
- stage: UnitTests
  displayName: Unit Tests
  jobs:
  - job: unit
    displayName: Run .NET Unit Tests
    steps:
      - checkout: self
        clean: true

      - template: templates/dotnet-setup.yml

      - task: Cache@2
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(NUGET_PACKAGES)

      - displayName: 'dotnet --info'
        script: dotnet --info
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 'true'


      - displayName: 'Tool restore'
        script: dotnet tool restore
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

      - displayName: 'Restore'
        script: dotnet restore --nologo --packages $(NUGET_PACKAGES)
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

      - displayName: 'Build'
        script: dotnet build --no-restore --nologo --configuration $(buildConfiguration)
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

      - displayName: 'Test'
        script: >
          dotnet test
          --configuration $(buildConfiguration)
          --no-restore --no-build --nologo -- --report-trx --results-directory $(TEST_RESULTS)
          tests
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/test_results.trx'
          failTaskOnFailedTests: true
          testRunTitle: 'Unit Tests'
