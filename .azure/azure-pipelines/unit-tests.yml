name: CI-UnitTests-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main

schedules:
- cron: "0 6 * * 1"    # 06:00 UTC â‰ˆ 08:00 Europe/Paris (CET/CEST)
  displayName: Weekly Monday 08:00 Paris
  branches:
    include:
      - main
  always: true

pool:
  name: 'Private Docker'
  demands:
    - docker

variables:
  buildConfiguration: 'Release'

stages:
- stage: UnitTests
  displayName: Unit Tests
  jobs:
  - job: unit
    displayName: Run .NET Unit Tests
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - checkout: self
        clean: true

      - template: templates/dotnet-setup.yml

      # Optional NuGet cache (safe to remove if you want ultra-minimal)
      - task: Cache@2
        displayName: 'Cache NuGet packages'
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(NUGET_PACKAGES)

      - script: dotnet --info
        displayName: 'dotnet --info'

      - script: dotnet restore
        displayName: 'Restore'

      - script: dotnet build --configuration $(buildConfiguration) --no-restore -v minimal
        displayName: 'Build'

      # Adjust the path(s) if your test projects live elsewhere.
      # If you use traits/categories, this excludes Integration tests:
      #   --filter "TestCategory!=Integration"
      - script: >
          dotnet test
          --configuration $(buildConfiguration)
          --no-build
          --logger "trx;LogFileName=test_results.trx"
          --collect "XPlat Code Coverage"
          tests
        displayName: 'Test (unit only)'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/test_results.trx'
          failTaskOnFailedTests: true
          testRunTitle: 'Unit Tests'
