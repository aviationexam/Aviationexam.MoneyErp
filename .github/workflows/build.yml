name: CI Build

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 8 * * 1" # At 08:00 on Monday

jobs:
  unit-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This will fetch the full history
      - name: Get access token
        id: get_token
        uses: ./.github/actions/get-access-token
        with:
          token_server_url: ${{ secrets.MONEYERP_ENDPOINT }}
          client_id: ${{ secrets.MONEYERP_CLIENT_ID }}
          client_secret: ${{ secrets.MONEYERP_CLIENT_SECRET }}
      - name: Fetch GrapQL schema
        run: |
          cd src/Aviationexam.MoneyErp.GraphQl

          curl -sS -f -X POST "${{ secrets.MONEYERP_ENDPOINT }}/graphql" \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
               -d '{ "query": "query IntrospectionQuery { __schema { queryType { name } mutationType { name } subscriptionType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } } fragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason } possibleTypes { ...TypeRef } } fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name } } } }" }' \
               > schema.json

          jq '{data: .Data}' schema.json > schema-fixed.json

          npm install -g graphql-json-to-sdl

          graphql-json-to-sdl schema-fixed.json schema.graphql
      - uses: actions/upload-artifact@v4
        with:
          name: schema.graphql
          path: src/Aviationexam.MoneyErp.GraphQl/schema.graphql
      - name: Tool restore
        run: dotnet tool restore
      - name: Restore
        run: dotnet restore --nologo
      - name: Build
        run: dotnet build --no-restore --nologo --configuration Release
      - name: Test
        run: dotnet test --nologo --no-build --configuration Release
        env:
          MONEYERP_CLIENT_ID: ${{ secrets.MONEYERP_CLIENT_ID }}
          MONEYERP_CLIENT_SECRET: ${{ secrets.MONEYERP_CLIENT_SECRET }}
          MONEYERP_ENDPOINT: ${{ secrets.MONEYERP_ENDPOINT }}

  code-style:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .Net 9.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: .Net Format
        run: dotnet format --no-restore --verify-no-changes -v diag
